---
title: "1 - Introduction"
subtitle: "Deploy and maintain models with vetiver"
format:
  revealjs: 
    slide-number: true
    footer: <https://posit-conf-2023.github.io/vetiver>
    preview-links: auto
    incremental: true
    theme: [default]
    width: 1280
    height: 720
knitr:
  opts_chunk: 
    echo: true
    collapse: true
    comment: "#>"
---

```{r}
#| include: false
#| file: setup.R
```

::: r-fit-text
Welcome!
:::

::: columns
::: {.column width="50%"}

<center>

### {{< fa wifi >}} 

Wi-Fi network name

`tktk`

</center>

:::

::: {.column width="50%"}

<center>

### {{< fa key >}} 

Wi-Fi password

`tktk`

</center>

:::
:::


## Who are you?

-   You have intermediate R or Python knowledge

-   You can read data from CSV and other flat files, transform and reshape data, and make a wide variety of graphs

-   You can fit a model to data with your modeling framework of choice
wide variety of graphs

-   You have exposure to basic modeling and machine learning practice

-   You do **not** need expert familiarity with advanced ML or MLOps topics


## Who are we?

. . .

::: columns
::: {.column width="50%"}
<center>

<img src="https://github.com/isabelizimm.png" style="border-radius: 50%;" width="300px"/>

[{{< fa brands github >}} \@isabelizimm](https://github.com/isabelizimm)

[{{< fa brands mastodon >}} \@isabelizimm@fosstodon.org](https://fosstodon.org/@isabelizimm)

[{{< fa link >}} isabelizimm.github.io](https://isabelizimm.github.io/)

</center>
:::

::: {.column width="50%"}
<center>

<img src="https://github.com/juliasilge.png" style="border-radius: 50%;" width="300px"/>

[{{< fa brands github >}} \@juliasilge](https://github.com/juliasilge)

[{{< fa brands mastodon >}} \@juliasilge@fosstodon.org](https://fosstodon.org/@juliasilge)

[{{< fa brands youtube >}} youtube.com/juliasilge](https://www.youtube.com/juliasilge)

[{{< fa link >}} juliasilge.com](https://juliasilge.com/)

</center>
:::
:::

# Asking for help

. . .

üü™ "I'm stuck and need help!"

üü© "I finished the exercise"

. . .

If you prefer, post on GitHub Discussions for help: <https://github.com/posit-conf-2023/vetiver/discussions>


## Plan for this workshop

- *Versioning*
    * Managing change in models ‚úÖ 
- *Deploying*
    * Putting models in REST APIs üéØ
- *Monitoring*
    * Tracking model performance üëÄ

# Introduce yourself to your neighbors üëã

::: {.callout-tip}
## Optional

Post an introduction on GitHub Discussions: <https://github.com/posit-conf-2023/vetiver/discussions>
:::

## What is machine learning?

![](images/ml_illustration.jpg){fig-align="center"}

::: footer
Illustration credit: <https://vas3k.com/blog/machine_learning/>
:::

## What is machine learning?

![](images/modeling-process.svg){fig-align="center"}

::: footer
Illustration credit: Chapter 1 of [*Tidy Modeling with R*](https://www.tmwr.org/software-modeling.html)
:::

## MLOps is...

. . .

![](images/ai-landscape.jpg){fig-align="center"}

::: footer
:::

## MLOps is... 

. . .

a set of <u>practices</u> to *deploy* and *maintain* machine learning models in production **reliably** and **efficiently**


## {background-color="white" background-image="https://vetiver.rstudio.com/images/ml_ops_cycle.png" background-size="contain"}

::: footer
:::

## MLOps with vetiver 

> Vetiver, the oil of tranquility, is used as a stabilizing ingredient in perfumery to preserve more volatile fragrances.


# If you develop a model...

. . .

you can operationalize that model!

# If you develop a model...

. . .

you likely *should* be the one to operationalize that model!


## Your turn üè∫ {transition="slide-in"}

. . .

*What language does your team use for machine learning?*

*What kinds of models do you commonly use?*

*Have you ever deployed a model?*

```{r}
#| echo: false
library(countdown)
countdown(minutes = 3)
```


##  Chicago food inspections data {background-image="images/christopher-alvarenga-cfmSStcrDn4-unsplash.jpg", background-opacity=0.5}


::: {.nonincremental}
-   The city of Chicago offers programmatic access to health code inspections of restaurants
-   Can certain measurements be used to predict inspection outcome?
-   Data from <https://data.cityofchicago.org/>
:::


::: footer
Image by [Christopher Alvarenga](https://unsplash.com/photos/cfmSStcrDn4)
:::

## Inspection results

-   `N = 20414`
-   A class outcome, `results`
-   Other variables to use for prediction:
  -   `facility_type` is a **nominal** predictor
  -   `risk` is a **nominal** (or maybe **ordinal**) predictor
  -   `violations` is a **numeric** predictor
  -   `inspection_date` is a **date** predictor


:::: {.columns}

::: {.column width="50%"}

```{r}
library(tidyverse)
library(arrow)
path <- here::here("data", "inspections.parquet")
inspections <- read_parquet(path)
```

:::

::: {.column width="50%"}

```{python}
import pandas as pd
inspections = pd.read_parquet('../data/inspections.parquet', engine = 'pyarrow')
inspections['inspection_date'] = pd.to_datetime(inspections['inspection_date'])
inspections['month'] = inspections['inspection_date'].dt.month
inspections['year'] = inspections['inspection_date'].dt.year
```
:::

::::


## Inspection results

```{r}
#| echo: false
gt::gt(slice_sample(inspections, n = 15))
```


## Your turn üè∫ {transition="slide-in"}

. . .

*Explore the `inspections` data on your own!*

* *What's the distribution of the outcome `results`?*
* *What's the distribution of the numeric variable `violations`?*
* *How do results differ across facility type?*

*Share something you noticed with your neighbor.*

```{r}
#| echo: false
countdown(minutes = 8, id = "explore-inspection")
```

::: notes
Make a plot or summary and then share with neighbor
:::

## 

```{r}
#| fig-align: 'center'
inspections |> 
  group_by(inspection_date = floor_date(inspection_date, unit = "month")) |> 
  summarise(results = mean(results == "PASS")) |> 
  ggplot(aes(inspection_date, results)) +
  geom_line(alpha = 0.8, linewidth = 1.5) +
  scale_y_continuous(labels = scales::percent) +
  labs(y = "% of inspections that have a PASS result", x = NULL)
```

## 

```{python, execute=FALSE}
#| eval: false
#| fig-align: 'center'
from plotnine import ggplot, aes, geom_boxplot, coord_flip
(ggplot(inspections, aes('facility_type', 'total_violations', fill = 'facility_type')) 
  + geom_boxplot(alpha = 0.5, show_legend = False)
  + coord_flip()
)
```

## 

```{r}
#| fig-align: 'center'
inspections |>
  ggplot(aes(inspection_date, total_violations, z = as.integer(results) - 1)) +
  stat_summary_hex(alpha = 0.7) +
  scale_fill_viridis_c(labels = scales::percent) +
  labs(fill = "% passed")
```


## Time for building a model!

```{r tree-example}
#| echo: false
#| fig.width: 16
#| fig.height: 8
#| fig-align: 'center'
#| dev-args: list(bg = "transparent")
tree_mod <- 
  rpart::rpart(
    results ~ facility_type + total_violations + risk,
    data = inspections,
    control = rpart::rpart.control(maxdepth = 5, cp = 0.001)
  ) |> 
  partykit::as.party()

plot(tree_mod)
```


## Spend your data budget

### R

```{r}
library(tidymodels)
set.seed(123)
inspect_split <- initial_split(inspections, prop = 0.8)
inspect_train <- training(inspect_split)
inspect_test <- testing(inspect_split)
```

### Python

```{python}
from sklearn import model_selection
import numpy as np
np.random.seed(123)
X, y = inspections.drop(columns=['aka_name', 'results', 'inspection_date']), inspections['results']
X_train, X_test, y_train, y_test = model_selection.train_test_split(
    X, y,
    test_size = 0.2
)
```


## Fit a logistic regression model üöÄ

Or your model of choice!

### R

```{r}
inspection_fit <-
  workflow(
    results ~ facility_type + risk + total_violations + inspection_date, 
    logistic_reg()
  ) |> 
  fit(data = inspect_train)
```

### Python

```{python}
from sklearn import preprocessing, linear_model, pipeline, compose

categorical_features = ['facility_type', 'risk', 'month', 'year']

oe = compose.make_column_transformer(
    (preprocessing.OrdinalEncoder(
            handle_unknown="use_encoded_value", unknown_value=-1),
        categorical_features,),
    remainder="passthrough",
).fit(X_train)
lr = linear_model.LogisticRegression().fit(oe.transform(X_train), y_train)
inspection_fit = pipeline.Pipeline([("ordinal_encoder", oe), ("random_forest", lr)])
```



## Your turn üè∫ {transition="slide-in"}

*Split your data in training and testing.*

*Fit a model to your training data.*

```{r}
#| echo: false
countdown(minutes = 5)
```


# Create a deployable bundle

## Create a deployable model object

### R

```{r}
library(vetiver)
v <- vetiver_model(inspection_fit, "inspection-result-rstats")
v
```

### Python

```{python}
from vetiver import VetiverModel
v = VetiverModel(inspection_fit, "inspection-result-python", prototype_data = X_train)
v.description
```


## Your turn üè∫ {transition="slide-in"}

*Create your vetiver model object.*

*Check out the default `description` that is created, and try out using a custom description.*

*Show your custom description to your neighbor.*

```{r}
#| echo: false
countdown(minutes = 5)
```


# Version your model

## {background-color="white" background-image="https://vetiver.rstudio.com/images/ml_ops_cycle.png" background-size="contain"}

::: footer
:::

## pins üìå

The pins package publishes data, models, and other R and Python objects, making it easy to share them across projects and with your colleagues.

. . .

::: {.callout-tip}

## You can pin objects to a variety of pin **boards**, including:

::: {.nonincremental}
- a local folder (like a network drive or even a temporary directory)
- Posit Connect
- Amazon S3
- Azure Storage
- Google Cloud
:::

:::

## Version your model

Learn about the pins package [for Python](https://rstudio.github.io/pins-python/) and [for R](https://pins.rstudio.com/)

::: {.panel-tabset}

### Python

```{python}
#| message: true
from pins import board_temp
from vetiver import vetiver_pin_write

board = board_temp(allow_pickle_read = True)
vetiver_pin_write(board, v)
```

### R

```{r}
#| message: true
library(pins)

board <- board_temp()
board |> vetiver_pin_write(v)
```

:::

## Your turn üè∫ {transition="slide-in"}

*Pin your vetiver model object to a temporary board.*

*Retrieve the model metadata with `pin_meta()`.*

```{r}
#| echo: false
countdown(minutes = 5)
```

# Posit Connect

tktk -- how do we tell folks to log in, get an API key?

## Version your model {auto-animate=true}

### R

```{r}
#| eval: false
library(pins)
board <- board_temp()
board |> vetiver_pin_write(v)
```

### Python

```{python}
#| eval: false
from pins import board_temp
from vetiver import vetiver_pin_write

board = board_temp(allow_pickle_read = True)
vetiver_pin_write(board, v)
```

## Version your model {auto-animate=true}

### R

```{r}
#| eval: false
library(pins)
board <- board_connect()
board |> vetiver_pin_write(v)
```

### Python

```{python}
#| eval: false
from pins import board_connect
from vetiver import vetiver_pin_write
import os
from dotenv import load_dotenv
load_dotenv()

api_key = os.getenv("CO_API_KEY")
rsc_url = os.getenv("CO_RSC_URL")

board = board_connect(server_url = rsc_url, api_key = api_key, allow_pickle_read = True)
vetiver_pin_write(board, v)
```

## Your turn üè∫ {transition="slide-in"}

*Pin your model to our Connect instance.*

*Train your model again, using a different ML algorithm (decision tree is a good option).*

*Write this new version of your model to the same pin, and see what versions you have with `pin_versions`.*

```{r}
#| echo: false
countdown(minutes = 5)
```


